/*

Да се дефинира класа Пица за која ќе се чуваат податоци за:

    име на пицата (низа од 15 знаци)
    цена (цел број)
    состојки (динамички алоцирана низа од знаци)
    намалување на цената во проценти (цел број) - ако пицата не е на промоција намалувањето има вредност нула, во спротивно, вредност поголема од нула и не поголема од 100.

За потребите на оваа класа да се креираат потребните конструктори и да се напише соодветен деструктор. Дополнително за оваа класа да се дефинира функцијата:

    pecati() - функција во која ќе се печатат податоците за пицата во следниот формат: име - состојки, цена.
    istiSe(Pica p) - функција за споредба на две пици според состојките :

Да се дефинира класа Picerija во која се чуваат:

    име (низа од максимум 15 знаци)
    динмички алоцирана низа од објекти од класата Pica
    број на пици (цел број)

За потребите на оваа класа да се дефинираат потребните конструктори и да се напише соодветен деструктор. Да се имплементираат и следниве методи:

    dodadi(Pica P) - за додавање нова пица во пицеријата, но само ако не постои иста во низата (нема пица со исти состојки со пицата што треба да се додаде).
    void piciNaPromocija() - се печатат сите пици од пицеријата што се на промоција во формат : име - состојки, цена, цена со попуст.

*/

#include <iostream>
#include <cstring>
using namespace std;
//Vasiot kod tuka
class Pica{
private:
	char ime[15];
    int cena;
    char *sostojki; // dinamicno alocirana memorija
    int namaluvanje;
public:
    // constructor w/ arguments
    Pica(char *ime="",int cena=0,char *sostojki="",int namaluvanje=50){
    	strcpy(this->ime, ime);
        this->cena = cena;
        this->sostojki = new char[strlen(sostojki)+1];
        strcpy(this->sostojki, sostojki);
        this->namaluvanje = namaluvanje;
    }
    
    // copy constructor
    Pica(const Pica &p){
    	strcpy(this->ime, p.ime);
        this->cena = p.cena;
        this->sostojki = new char[strlen(p.sostojki) + 1];
        strcpy(sostojki, p.sostojki);
        namaluvanje = p.namaluvanje;
    }
    
    // operator = overload
    Pica &operator=(const Pica &p){
        if(this!=&p){
            strcpy(ime, p.ime);
            cena = p.cena;
            namaluvanje = p.namaluvanje;
            delete[] sostojki;
            sostojki = new char[strlen(p.sostojki) + 1];
            strcpy(sostojki, p.sostojki);
        }
        return *this;
    }
    
    // pecati()
    void pecati(){
    	cout<< ime << " - " << sostojki << ", " << cena << " "<< cena-cena*namaluvanje/100 << endl;
    }
    
    // getSostojki()
    char* getSostojki(){
    	return sostojki;
    }
    
    // istiSe(pica p)
    bool istiSe(Pica p)
    {
        if(strcpy(p.sostojki,sostojki)==0)
            return true;
        else 
            return false;
    }
    
    // getPromocija()
    int getPromocija(){
    	return namaluvanje;
    }
    
    // deconstructor
    ~Pica(){
    	delete[] sostojki;
    }
};

class Picerija{
private:
    char ime[15];
    Pica *pici;
    int brojPici;
public:    
    // constructor w/ arguments
    Picerija(char *ime="",Pica *pici=0,int brojPici=0){
    	strcpy(this->ime, ime);
        this->brojPici = brojPici;
        this->pici = new Pica[brojPici];
        for(int i = 0; i < brojPici; i++)
            this->pici[i] = pici[i];        
    }
    
    // copy constructor
    Picerija(const Picerija &p){
    	strcpy(this->ime, p.ime);
        this->brojPici = p.brojPici;
        this->pici = new Pica[p.brojPici];
        for(int i = 0; i < p.brojPici; i++)
            this->pici[i] = p.pici[i];
    }
    
    // operator = overload
    Picerija &operator=(const Picerija &p){
        if(this!=&p){
    		strcpy(this->ime, p.ime);
        	this->brojPici = p.brojPici;
            delete[] pici;
        	this->pici = new Pica[p.brojPici];
        	for(int i = 0; i < p.brojPici; i++)
        		this->pici[i] = p.pici[i];
        }
        return *this;
    }
    
    // dodadi(pica P)
    void dodadi(Pica P){
        bool imaIsta = 0;        
        // for loop - proverka dali ima ista pica
        for(int i = 0; i < brojPici; i++){
            if(strcmp(pici[i].getSostojki(), P.getSostojki()) == 0){
            	imaIsta = 1;
            }
        }
        
        // ako nema ista, dodaj ja novata pica
        if(imaIsta == 0){
        	Pica *tmp = new Pica[brojPici];
            for(int i = 0; i < brojPici; i++){
				tmp[i] = pici[i];
            }
            delete[] pici;
            pici = new Pica[brojPici+1];
            for(int i = 0; i < brojPici; i++)
                pici[i] = tmp[i];
            pici[brojPici] = P;
            brojPici++;
            delete[] tmp;
        }
    }
    
    // piciNaPromocija()
    void piciNaPromocija(){
        for(int i = 0; i < brojPici; i++){
            if(pici[i].getPromocija() > 0){
            	pici[i].pecati();
            }
        }
    }
    
    void setIme(char *ime){
        strcpy(this->ime,ime);}
    
    char* getIme(){
        return ime;}
    
    // deconstructor
    ~Picerija(){
    	delete[] pici;
    };
};

int main () {

    int n;
    char ime[15];
    cin >> ime;
    cin >> n;

    Picerija p1(ime);
    for(int i = 0; i < n; i++){
        char imp[100];
        cin.get();
        cin.getline(imp,100);
        int cena;
        cin >> cena;
        char sostojki[100];
        cin.get();
        cin.getline(sostojki,100);
        int popust;
        cin >> popust;
        Pica p(imp,cena,sostojki,popust);
        p1.dodadi(p);
    }

    Picerija p2 = p1;
    cin >> ime;
    p2.setIme(ime);
    char imp[100];
    cin.get();
    cin.getline(imp,100);
    int cena;
    cin >> cena;
    char sostojki[100];
    cin.get();
    cin.getline(sostojki,100);
    int popust;
    cin >> popust;
    Pica p(imp,cena,sostojki,popust);
    p2.dodadi(p);

    cout<<p1.getIme()<<endl;
    cout<<"Pici na promocija:"<<endl;
    p1.piciNaPromocija();

    cout<<p2.getIme()<<endl;
    cout<<"Pici na promocija:"<<endl;
    p2.piciNaPromocija();

	return 0;
}
