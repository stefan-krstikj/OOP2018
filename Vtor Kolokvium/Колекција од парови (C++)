/*


Да се имплементира класа Par во која што се чуваат:

    клуч (динамички алоцирана низа од знаци)
    вредност (децимален број)

За класата да се имплементираат:

    соодветните конструктори, деструктор и оператор = (0.5 п.)
    оператор за печатење на стандарден излез << во формат ([клуч],[вредност])(0.5 п.)
    оператор ++ во префикс и постфикс нотација со кој се зголемува вредноста за 1 (0.5 п.)
    оператор + за собирање на два објекти од оваа класа што враќа нов објект во кој клучот е подолгиот од клучевите на двата објекти што се собираат, а вредноста е збир на вредностите на двата објекти што се собираат. Ако клучевите на двата објекти се со иста должина, се зема клучот на левиот објект од операцијата собирање. (0.5 п.)
    оператор == за споредба на два објекти од класа Par (0.5 п.)

Да се имплементира класа Kolekcija во која што се чуваат:

    динамички алоцирана низа од објекти од класата Par
    должина на низата (цел број)

За класата да се имплементираат:

    соодветни конструктори, деструктор и оператор = (0.5 п.)
    оператор += за додавање нов објект од класата Par во низата (0.5 п.)
    оператор за печатење на стандарден излез << кој го печати бројот на елементи во низата, а потоа во нов ред го печати секој пар во низата (0.5 п.)
    оператор == за споредба на два објекти од класа Kolekcija. Две колекции се еднакви ако имаат ист број на елементи и сите објекти во низата се еднакви на соодветните позиции (0.5 п.)
    void najdi (const char * kluc) : функција која го печати првиот парот со клуч kluc. Доколку не постои таков во колекцијата да се испечати порака. (0.5 п.)

*/

#include <cstring>
#include <iostream>

using namespace std;

class Par{
private:
    char *kluc;
    double vrednost;
public:
    Par(){
    	kluc = new char[0];
        vrednost = 0;
    }
    
    Par(const char *kluc, double vrednost){
    	this->vrednost = vrednost;
        this->kluc = new char[strlen(kluc)+1];
        strcpy(this->kluc, kluc);
    }
    ~Par(){delete[] kluc; }
    
    Par(const Par &p){
    	vrednost = p.vrednost;
        kluc = new char[strlen(p.kluc)+1];
        strcpy(kluc, p.kluc);
    }
    
    Par &operator=(const Par &p){
        if(this!=&p){
        	delete[] kluc;
            vrednost = p.vrednost;
        	kluc = new char[strlen(p.kluc)+1];
        	strcpy(kluc, p.kluc);
        }
        return *this;
    }
    
    friend ostream &operator<<(ostream &out, const Par &p){
    	out << "(" <<p.kluc << ", " << p.vrednost << ")"<< endl;
        return out;
    }
    
    // overload ++
    Par &operator++(){
    	vrednost++;
        return *this;
    }
    
    Par operator++ (int){
    	Par temp(*this);
        vrednost++;
        return temp;
    }
    
    Par operator+(const Par &p){
        if(strlen(kluc) >= strlen(p.kluc)){
            return Par(kluc, vrednost+p.vrednost);
        }
        else{
            return Par(p.kluc, vrednost+p.vrednost);
        }
    }
    
    bool operator == (const Par &p){
		return strcmp(this->kluc,p.kluc)==0&&this->vrednost == p.vrednost;
}
    bool operator != (const Par &p){
		return strcmp(this->kluc,p.kluc)!=0 || this->vrednost != p.vrednost;
}
    
    friend class Kolekcija;
       
};

class Kolekcija{
private:
    Par *niza;
    int n;
public:
    Kolekcija(){
    	niza = new Par[0];
        n = 0;
    }
    ~Kolekcija() {delete[] niza;}
    
    Kolekcija(const Kolekcija &k){
    	n = k.n;
        niza = new Par[n];
        for(int i = 0; i < n; i++){
            niza[i] = k.niza[i];
        }
    }
    
    Kolekcija &operator=(const Kolekcija &k){
        if(this!=&k){
            n = k.n;
            delete[] niza;
            niza = new Par[n];
            for(int i = 0; i < n; i++){
                niza[i] = k.niza[i];
            }
        }
        return *this;
    }
    
    Kolekcija &operator+=(const Par &p){
    	Par *tmp = new Par[n + 1];
        for(int i = 0; i < n; i++){
        	tmp[i] = niza[i];
        }
        tmp[n++] = p;
        delete[] niza;
        niza = tmp;
        return *this;
    }
    
    friend ostream &operator<<(ostream &out, const Kolekcija &k){
    	out << k.n << endl;
        for(int i = 0; i < k.n; i++){
        	out << k.niza[i]; 
        }
        return out;
    }
    
    bool operator==(const Kolekcija &k){
    	if(n != k.n)
            return false;
        for(int i = 0; i < n; i++){
            if(this->niza[i] != k.niza[i]){
                return false;
            }
        }
         return true;
    }
    
    void najdi(const char *kluc){
        int flag = 1;
        for(int i = 0; i < n; i++){
            if(strcmp(niza[i].kluc, kluc) == 0){
            	cout << niza[i];
                 flag = 0;
                break;
            }
        }
        if(flag)
            cout << "Ne e najdeno" << endl;
    }
};

void printTrueOrFalse (Kolekcija k1, Kolekcija k2){
	if (k1==k2)
		cout << "TRUE" <<endl;
	else
		cout <<"FALSE" << endl;
}

int main() {
	
	int testCase;
	cin >> testCase;
	
	if (testCase == 1){
		cout<<"Testiranje na konstruktori za Par i operator << "<<endl;
		Par p[20];
		int n;
		cin>>n;
		char kluc[50];
		double vrednost;
		for (int i=0;i<n;i++){
			cin >> kluc >> vrednost;
			//cout << kluc << vrednost;
			Par p1 = Par(kluc,vrednost);
			//cout <<"GRESKA";
			p[i] = p1;
			cout << p[i];
		}
	}
	else if (testCase == 2) {
		cout << "Testiranje na operatorite ++ vo prefix i postfix notacija" <<endl;
		Par p1 = Par("FINKI",10.20);
		
		cout << p1;
		cout << p1++;
		cout << p1;
		
		Par p2 = Par("OOP",69.69);
		
		cout << p2;
		cout << ++p2;
		cout << p2;		
	}
	else if (testCase == 3) {
		cout << "Testiranje na operatorot + vo klasata Par"<<endl;
		double vrednost;
		char kluc[50];
		Par p[2];
		for (int i=0;i<2;i++){
			cin >> kluc >> vrednost;
			p[i]=Par(kluc,vrednost);
		}
		
		cout << p[0]+p[1];			
	}
	else if (testCase==4) {
		cout << "Testiranje na operatorot + vo klasata Par"<<endl;
		double vrednost;
		char kluc [50];
		int n;
		cin >> n;
		Par p [50];
		for (int i=0;i<n;i++){
			cin>>kluc>>vrednost;
			p[i]=Par(kluc,vrednost);
		}
		
		Par p1 = p[0];
		for (int i=1;i<n;i++)
			p1 = (p1 + p[i]);
		
		cout << p1;
	}
	else if (testCase == 5) {
		cout<<"Testiranje na operatorite << i += vo klasata Kolekcija"<<endl;
		Kolekcija k;
		int n;
		double vrednost;
		char kluc [50];
		cin >> n;
		for (int i=0;i<n;i++){
			cin >> kluc >> vrednost;
			Par p = Par (kluc,vrednost);
			k+=p;
			//cout << p;
		}
		
		cout << k;
	}
	else if (testCase == 6){
		cout << "Testiranje na operator == za klasata Kolekcija"<<endl;
		
		Par p1 ("A",1);
		Par p2 ("B",2);
		Par p3 ("B",3);
		Par p4 ("C",4);
		
		Kolekcija k1;
		k1 += p1;
		k1 += p2;
		k1 += p3;
		
		Kolekcija k2;
		k2+=p1;
		k2+=p4;
		
		Kolekcija k3;
		k3+=p1;
		k3+=p4;
		
		Kolekcija k4;
		k4+=p1;
		k4+=p3;
        
		printTrueOrFalse(k1,k2);
		printTrueOrFalse(k1,k3);
		printTrueOrFalse(k1,k4);
		printTrueOrFalse(k2,k3);
		printTrueOrFalse(k2,k4);
		printTrueOrFalse(k3,k4);
		
		
	}
	else {
		cout << "Testiranje na metodot najdi() vo klasata Kolekcija"<<endl;
		Kolekcija k;
		int n;
		double vrednost;
		char kluc [50];
		cin >> n;
		for (int i=0;i<n;i++){
			cin >> kluc >> vrednost;
			Par p = Par (kluc,vrednost);
			k+=p;
			//cout << p;
		}
		
		char toFind[50];
		cin >> toFind;
		k.najdi(toFind);
	}	
	return 0;
	
}
