/*


Да се дефинира апстрактна класа Employee којашто ќе содржи име на вработениот, години и работно искуство во години (integer). Да се дефинираат чисти виртуелни функции plata() и bonus() (double).

Од класата Employee да се изведе класа SalaryEmployee која покрај основните информации содржи и информација за основната плата. Бонусот на овие работници се пресметува како процент од основната плата, а процентот е бројот на години со работно искуство. На пример ако работеле 10 години, бонусот е 10 проценти од основната плата. Вкупната плата се пресметува како основната плата плус бонусот.

Од класата Employee исто така да се изведе класа HourlyEmployee која покрај основните информации содржи информација и за вкупниот број на часови кои ги одработил работникот и платата по час. Вкупната плата се пресметува како бројот на часови помножен со платата по час плус бонусот, додека бонусот се пресметува на следниот начин: За секој час над 320-тиот се добива 50 проценти од платата по час.

Од класата Employee на крај се изведува класата Freelancer која покрај основните информации содржи и број на проекти на кои работел вработениет и низа со суми кои ги добил за тие проекти (double). По направени 5 проекти, за секој нареден вработените добиваат бонус од 1000 денари. Вкупната плата на овој тип на вработени изнесува вкупната сума добиена од сите проекти плус бонусот.

Да се преоптовари операторот == кој ќе прима два објекти од класата Employee и ќе ги споредува според тоа дали имаат ист број на години и дали добиваат ист бонус.

Да се дефинира класа Company која ќе содржи информации за името на компанијата, бројот на вработени, и динамична низа од покажувачи од класата Employee или Employee **. За потребите на оваа класа треба да се дефинира конструктор кој прима само еден аргумент - името на компанијата, да се преоптовари операторот += и да се дефинираат следните методи:

    double vkupnaPlata() - метод којшто ја враќа вкупната плата на сите вработени во компанијата
    double filtriranaPlata(Employee * emp) - метод којшто ја враќа платата само на работниците кои се еднакви со дадениот вработен (според оператор ==)
    void pecatiRabotnici() - метод којшто печати по колку вработени има од секој тип на работници во компанијата, а форматот на печатење можете да го видите од тест примерите

Hint: За потребите на последниот метод можете да искористите статички членови и статички функции во секоја од класата, dynamic_cast, виртуелна функција која ќе ја преоптоварите во секоја од класите или нешто друго по ваша желба.
*/

#include <cstring>
#include <iostream>

using namespace std;

class Employee{
protected:
    char employeeName[50];
    int age;
	int experience;
public:
    Employee(char *eN, int a, int ex){
        strcpy(employeeName, eN);
        age = a;
        experience = ex;
    }
    virtual double plata() = 0;
    virtual double bonus() = 0;

    bool operator==(Employee &e){
        if(age == e.age){
        	if(bonus() == e.bonus())
                return true;
        }
        return false;
    }
    
    Employee &operator=(const Employee &em){
        strcpy(employeeName, em.employeeName);
        age = em.age;
        experience = em.experience;
        return *this;
    }
};

class SalaryEmployee: public Employee{
private:
    double basicSalary;
public:
    SalaryEmployee(char *eN, int a, int ex, double basicS) : Employee(eN, a, ex){
        basicSalary = basicS;
    }
    double bonus(){
        return experience * basicSalary / 100.0;
    }
    double plata(){ return basicSalary + bonus(); }
};

class HourlyEmployee: public Employee{
private:
    int hoursWorked;
    int hourlyPay;
public:
    HourlyEmployee(char *eN, int a, int ex, 
    int hoursWorked, int hourlyPay) : Employee(eN, a, ex){
        this->hoursWorked = hoursWorked;
        this->hourlyPay = hourlyPay;
    }

    double bonus(){
        if(hoursWorked > 320){
        	return (hoursWorked - 320) * 0.5 * hourlyPay;
        }
        return 0;
    }

    double plata(){
        return hoursWorked * hourlyPay + bonus();
    }
};

class Freelancer: public Employee{
private:
    int numProjects;
    double projects[10];
public:
    Freelancer(char *eN, int a, int ex, 
    int numProjects, double proekti[]) : Employee(eN, a, ex){
        this->numProjects = numProjects;
        for(int i = 0; i < numProjects; i++){
            projects[i] = proekti[i];
        }
    }

    double bonus(){
        if(numProjects <= 5)
            return 0;
        return  (numProjects - 5) * 1000;
    }

    double plata(){
        double total = 0;
        for(int i = 0; i < numProjects; i++)
            total+= projects[i];
        return total + bonus();
    }
};

class Company{
private:
    char name[50];
    int n;
    Employee **employees;
public:
    Company(char *name){
        strcpy(this->name, name);
        n = 0;
        employees = new Employee*[0];
    }

    Company &operator+=(Employee *e){
        Employee **tmp = new Employee*[n+1];
        for(int i = 0; i < n; i++)
            tmp[i] = employees[i];
        tmp[n++] = e;
        delete[] employees;
        employees = tmp;
        return *this;
    }

    double vkupnaPlata(){
        double total = 0;
        for(int i = 0; i < n; i++)
            total+= employees[i]->plata();
        return total;
    }

    double filtriranaPlata(Employee *emp){
        double total = 0;
        for(int i = 0; i < n; i++){
            if(*employees[i] == *emp)
                total+= employees[i]->plata();
        }
        return total;
    }

    void pecatiRabotnici(){
        cout << "Vo kompanijata " << name << " rabotat:" << endl;
        int salary = 0, hourly = 0, free = 0;
        for(int i = 0; i < n; i++){
        	SalaryEmployee *se = dynamic_cast<SalaryEmployee *>(employees[i]);
            if(se)
                salary++;
            else{
            	HourlyEmployee *he = dynamic_cast<HourlyEmployee *>(employees[i]);
                if(he)
                    hourly++;
                else
                    free++;
            }
        }
        cout << "Salary employees: " << salary << endl << "Hourly employees: " << hourly << endl
            <<"Freelancers: " << free << endl;
    }
};

int main() {

char name[50];
cin >> name;
Company c(name);

int n;
cin >> n;

char employeeName[50];
int age;
int experience;
int type;

for (int i=0; i <n; ++i) {
  cin >> type;
  cin >> employeeName >> age >> experience;

  if (type == 1) {
    int basicSalary;
    cin >> basicSalary;
    c += new SalaryEmployee(employeeName, age, experience, basicSalary);
  }

  else if (type == 2) {
    int hoursWorked;
    int hourlyPay;
    cin >> hoursWorked >> hourlyPay;
    c += new HourlyEmployee(employeeName, age, experience, hoursWorked, hourlyPay);
  }

  else {
    int numProjects;
    cin >> numProjects;
    double projects[10];
    for (int i=0; i < numProjects; ++i) {
      cin >> projects[i];
    }
    c += new Freelancer(employeeName, age, experience, numProjects, projects);
  }
}

c.pecatiRabotnici();
cout << "Vkupnata plata e: " << c.vkupnaPlata() << endl;
Employee * emp = new HourlyEmployee("Petre_Petrov",31,6,340,80);
cout << "Filtriranata plata e: " << c.filtriranaPlata(emp);

delete emp;
}

/*class Employee {

protected:
  char name[50];
  int age;
  int experience;

public:
  Employee(const char * ime, int godini, int iskustvo) {
    strcpy(name,ime);
    age = godini;
    experience = iskustvo;
  }

  int getAge() const {
    return age;
  }

  virtual double plata() const = 0;
  virtual double bonus() const{
    return 0;
  }

  virtual ~Employee() {}
};

bool operator == (const Employee &emp1,const Employee &emp2) {
  return emp1.getAge() == emp2.getAge()&&emp1.bonus() == emp2.bonus();
}
class SalaryEmployee : public Employee {
private:
  double basicSalary;
  static int br;

public:
  SalaryEmployee(const char * ime, int godini, int iskustvo, int osnovica)
  : Employee(ime,godini, iskustvo) {
    basicSalary = osnovica;
    br++;
  }

  static int getStatic() {
    return br;
  }

  double bonus() const{
    return (experience * basicSalary) / 100.0;
  }

  double plata() const{
    return basicSalary + bonus();
  }
};

int SalaryEmployee :: br = 0;

class HourlyEmployee : public Employee {
private:
  int hoursWorked;
  double hourlyPay;
  static int br;
public:
  HourlyEmployee(const char * ime, int godini, int iskustvo, int casovi, double saatnica)
  : Employee(ime, godini, iskustvo) {
    hoursWorked = casovi;
    hourlyPay = saatnica;
    br++;
  }

  static int getStatic() {
    return br;
  }

  double bonus()const{
    if (hoursWorked > 320) {
      return (hoursWorked - 320) * 0.5 * hourlyPay;
    }
    else
    return 0;
  }
  double plata() const{
    return hoursWorked * hourlyPay + bonus();
  }

};

int HourlyEmployee :: br = 0;

class Freelancer : public Employee {
private:
  int num;
  double projects[10];
  static int br;
public:
  Freelancer(const char * ime, int godini, int iskustvo, int broj, double proekti[])
  : Employee(ime,godini,iskustvo) {
    num = broj;
    for (int i=0; i < num; ++i) {
      projects[i] = proekti[i];
    }
    br++;
  }

  static int getStatic() {
    return br;
  }

  double bonus() const{
      if (num > 5) {
        return (num - 5) * 1000.0;
      }
      else
        return 0;
  }

  double plata() const{
    double p = 0;
    for (int i=0; i < num; ++i) {
      p += projects[i];
    }
    return p + bonus();
  }
};

int Freelancer :: br = 0;

class Company {
private:
  char name[50];
  int number;
  Employee ** employees;
public:
  Company(const char* ime) {
    number = 0;
    strcpy(name,ime);
    employees = new Employee*[0];
  }

  Company & operator += (Employee *emp) {
    Employee ** tmp = new Employee*[number + 1];

    for (int i=0; i < number; ++i) {
      tmp[i] = employees[i];
    }
    tmp[number++] = emp;
    delete [] employees;
    employees = tmp;
    return * this;
  }

  double vkupnaPlata() {
    double plata = 0;
    for (int i=0; i < number; ++i) {
      plata += employees[i] -> plata();
    }
    return plata;
  }

  void pecatiRabotnici() {
    cout << "Vo kompanijata " << name << " rabotat:" <<endl;
    cout << "Salary employees: " << SalaryEmployee::getStatic() << endl;
    cout << "Hourly employees: " << HourlyEmployee::getStatic() << endl;
    cout << "Freelancers: " << Freelancer::getStatic() << endl;
  }

  double filtriranaPlata(Employee  *emp) {
    double plata = 0;
    for (int i=0; i < number; ++i) {
      if (*emp == *employees[i]) {
        plata += employees[i] -> plata();
      }
    }
    return plata;
  }

  ~Company() {
    for (int i=0; i < number; ++i) {
      delete employees[i];
    }
    delete [] employees;
  }

};
*/
