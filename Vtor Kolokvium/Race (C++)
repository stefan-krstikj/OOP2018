/*

Runner

Да се имплементира класа Runner за која се чуваат:

    динамички алоцирана низа од карактери за името
    статичка низа од максимум 50 карактери за државата од која доаѓа
    време на завршување на трката и тоа како два цели броја - минути и секунди
    број на освоени медали до сега (integer)

За потребите на класата да се напишат:

    Конструктор (default и со аргументи - погледнете main)
    Деструктор
    Copy constructor
    Оператор =

Да се преоптоварат операторите:

    префиксен ++ за зголемување на бројот на медалите за 1
    оператор != кој споредува двајца тркачи според државата од која доаѓаат
    оператор < кој споредува двајца тркачи според времето на завршување на трката

    оператор << кој го печати натпреварувачот во формат:

    Име - држава - минути:секунди - број на освоени медали

Race

Да се имплементира класа Race во која се чуваат:

    статичка низа од 50 карактери за името на трката
    динамички алоцирана низа од тркачи
    број на тркачи кои учествуваат

За потребите на класата да се имплементираат:

    конструктор со еден аргумент (име на трка)
    деструктор
    Copy constructor
    Оператор =

Да се преоптоварат операторите:

    оператор += за додавање на нов тркач во трката
    оператор -= кој прима тркач и од трката ги отстранува сите тркачи кои се од иста држава како него
    префиксен оператор ++ кој го зголемува бројот на медали за 1 на тркачот кој завршил прв на трката

    оператор за печатење << кој печати во следниот формат:

    Име на трка

    Тркач 1

    Тркач 2

    ...
*/

#include <iostream>
#include <cmath>
#include <cstring>

using namespace std;

class Runner {
private:
	char *ime;
	char drzava[50];
	int minuti;
	int sekundi;
	int medali;
public:
	Runner() {
		ime = new char[0];
	}
	
    // 
	Runner(char *ime, char *drzava, int minuti, int sekundi, int medali) {
		this->minuti = minuti;
		this->sekundi = sekundi;
		this->medali = medali;
		strcpy(this->drzava, drzava);
		this->ime = new char[strlen(ime)+1];
		strcpy(this->ime, ime);
	}
	~Runner() { 
        delete[] ime; 
    }
    
    // copy constructor
	Runner(const Runner &r) {
		ime = new char[strlen(r.ime) + 1];
		strcpy(ime, r.ime);
		strcpy(drzava, r.drzava);
		minuti = r.minuti;
		sekundi = r.sekundi;
		medali = r.medali;
	}

	// overload =
	Runner &operator=(const Runner &r) {
		if (this != &r) {
			delete[] ime;
			ime = new char[strlen(r.ime)+1];
			strcpy(ime, r.ime);
			strcpy(drzava, r.drzava);
			minuti = r.minuti;
			sekundi = r.sekundi;
			medali = r.medali;
		}
		return *this;
	}
    
    // overload ++
    Runner &operator++(){
    	++medali;
        return *this;
    }

	// overload!=
	bool operator!=(const Runner &r1) {
		return (strcmp(r1.drzava, drzava));
	}

	// overload <
	bool operator<(const Runner &r1) {
		if (minuti < r1.minuti)
			return true;
		else if (minuti == r1.minuti) {
			if (sekundi < r1.sekundi)
				return true;
		}
		return false;
	}

	// overload <<
	friend ostream &operator<<(ostream &out, const Runner &r) {
		out << r.ime << " - " << r.drzava << " - " << r.minuti << ":" << r.sekundi << " - " << r.medali;
		return out;
	}

	friend class Race;
};

class Race {
private:
	char ime[50];
	Runner *niza;
	int broj;
public:
	Race(char *ime) {
		strcpy(this->ime, ime);
        niza = new Runner[0];
        broj = 0;
	}
	~Race() { delete[] niza; }
	
    // copy constructor
	Race(const Race &r) {
		strcpy(this->ime, r.ime);
		broj = r.broj;
		niza = new Runner[broj];
		for (int i = 0; i < broj; i++)
			niza[i] = r.niza[i];
	}

	Race &operator=(const Race &r) {
		if (this != &r) {
			strcpy(this->ime, r.ime);
			broj = r.broj;
			delete[] niza;
			niza = new Runner[broj];
			for (int i = 0; i < broj; i++)
				niza[i] = r.niza[i];
		}
		return *this;
	}

	// overload +=
	Race &operator+=(const Runner &r) {
		Runner *tmp = new Runner[broj + 1];
		for (int i = 0; i < broj; i++)
			tmp[i] = niza[i];
		tmp[broj++] = r;
		delete[] niza;
		niza = tmp;
		return *this;
	}

	// overload -=
	Race &operator-=(const Runner &r) {
		Runner *tmp = new Runner[broj];
		int novBroj = 0;
		for (int i = 0; i < broj; i++) {
			if (niza[i] != r) {
				tmp[novBroj] = niza[i];
				novBroj++;
			}
		}
		delete[] niza;
		niza = tmp;
		broj = novBroj;
		return *this;
	}

	// overload ++
	Race &operator++() {
		Runner first = 	niza[0];
        int najInd = 0;
        for(int i = 0; i < broj; i++){
            if(niza[i] < first){
            	first = niza[i];
                najInd = i;
            }
        }
        ++niza[najInd];
        return *this;
	}

	// overload <<
	friend ostream &operator<<(ostream &out, const Race &r) {
		out << r.ime << ":" <<endl;
		for (int i = 0; i < r.broj; i++)
			out << r.niza[i] << endl;
		return out;
	}
};

int main() {

	int n;
	cin >> n;

	char nameRace[50];
	cin >> nameRace;

	Race race = Race(nameRace);
	int m;
	cin >> m;
    
	char name[50];
	char country[50];
	int minutes;
	int seconds;
	int numberOfMedals;     
	for (int i = 0; i < m; ++i) {
		cin >> name;
		cin >> country;
		cin >> minutes;
		cin >> seconds;
		cin >> numberOfMedals;
		Runner r = Runner(name, country, minutes, seconds, numberOfMedals);
		race += r;
	}
	cout << race;

	if (n == 1) {
		++race;
		cout << race;
	}
	else if (n == 2) {
		cin >> name;
		cin >> country;
		cin >> minutes;
		cin >> seconds;
		cin >> numberOfMedals;
		Runner r = Runner(name, country, minutes, seconds, numberOfMedals);
		race -= r;
		cout << race;
	}
	else if (n == 3) {
		cin >> name;
		cin >> country;
		cin >> minutes;
		cin >> seconds;
		cin >> numberOfMedals;
		Runner r = Runner(name, country, minutes, seconds, numberOfMedals);
		race -= r;
		++race;
		cout << race;
	}
}
