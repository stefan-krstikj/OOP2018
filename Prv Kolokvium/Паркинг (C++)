/*


Да се дефинира класа ParkingPlac во која се чуваат податоци за:

    Адреса на плацот (низа од знаци, максимум 20),
    Идентификациски број на плацот (динамичка низа од знаци),
    Цена за паркирање за 1 час (цел број),
    Заработка на паркинг плацот (цел број)

параметри потребни за дополнителниот дел од задачата:

    Динамичка низа од класата Avtomobil
    Број на паркирани автомобили во даден момент

За потребите на класата да се имплементираат :

    соодветни конструктори и деструктор, и потребните get-функции (погледнете ги повиците во main функцијата)

    функција pecati() за печатење на податоците за еден паркинг плац во следниот формат:

    идентификациски_број адреса - X denari, ако X е заработката на паркинг плацот X не е 0

    идентификациски_број адреса , ако X =0

    функција platiCasovi(int casovi) која на заработката ја додава платената вредност за дадениот број на часови.
    функција daliIstaAdresa(ParkingPlac p) во која се споредува дали дадениот паркинг плац е на иста адреса како паркинг плацот p.

Во дадената main функција прво се внесуваат n паркинг плацеви. Потоа се внесуваат m плаќања и на крај се печатат сите паркинг плацеви од низата кои имаат иста адреса со дадениот паркинг плац (објектот pCentar).

ДОПОЛНИТЕЛНО БАРАЊЕ

Дефинирајте класа Avtomobilво која се чуваат податоците за:

    Бојата на автомобилот (низа од знаци, максимум 20)
    Брендот на автомобилот (низа од знаци, максимум 20)
    Моделот на автомобилот (низа од знаци, максимум 20)

За потребите на класата ќе треба да :

    Се имплементира конструктор
    Да го преоптоварите assignment operator-от

Понатака да пишете метод за класата ParkingPlac наречен parkirajVozilo(Avtomobil novoVozilo), неговата цел ќе биде да се паркира ново возило на паркингот во кој се повикува методот.

На крај ќе треба да се испечатат паркираните возила во еден паркинг преку методот pecatiParkiraniVozila() кој исто така треба да биде имплементиран во класата ParkingPlac.

Ориентирајте се според дадениот код во main методот за како се ова треба да го имплементирате.
*/

#include<iostream>
#include <cstring>

using namespace std;
//вашиот код
class Avtomobil{
private:
    char boja[20];
    char brend[20];
    char model[20];
public:
    Avtomobil(const char *boja="", const char *brend="", const char *model=""){
    	strcpy(this->boja, boja);
        strcpy(this->brend, brend);
        strcpy(this->model, model);
    }
    
    Avtomobil(const Avtomobil &a){
    	strcpy(this->boja, a.boja);
        strcpy(this->brend, a.brend);
        strcpy(this->model, a.model);
    }
    
    Avtomobil &operator=(const Avtomobil &a){
        if(this!=&a){
            strcpy(this->boja, a.boja);
            strcpy(this->brend, a.brend);
            strcpy(this->model, a.model);
        }
        return *this;
    }
    friend class ParkingPlac;
};

class ParkingPlac{
private:
    char adresa[20];
    char *id;
    int cenacas;
    int zarabotka;
    Avtomobil *niza;
    int parkirani;
public:
    ParkingPlac(const char *adresa="", const char *id="", int cenacas=0){
    	strcpy(this->adresa, adresa);
        this->id = new char[strlen(id) + 1];
        strcpy(this->id, id);
        this->cenacas = cenacas;
        zarabotka = 0;
        niza = new Avtomobil[0];
        parkirani = 0;
    }
    
    ParkingPlac(const ParkingPlac &p){
    	strcpy(this->adresa, p.adresa);
        this->id = new char[strlen(p.id) + 1];
        strcpy(this->id, p.id);
        this->cenacas = p.cenacas;
        zarabotka = p.zarabotka;
        niza = new Avtomobil[p.parkirani];
        for(int i = 0; i < p.parkirani; i++)
            niza[i] = p.niza[i];
        parkirani = p.parkirani;
    }
    
    ParkingPlac &operator=(const ParkingPlac &p){
        if(this!=&p){
            strcpy(this->adresa, p.adresa);
            this->id = new char[strlen(p.id) + 1];
            strcpy(this->id, p.id);
            this->cenacas = p.cenacas;
            zarabotka = p.zarabotka;
            delete[] niza;
            niza = new Avtomobil[p.parkirani];
            for(int i = 0; i < p.parkirani; i++)
                niza[i] = p.niza[i];
            parkirani = p.parkirani;
        }
        return *this;
    }
    
    void pecati(){
    	cout << id << " " << adresa;
        if(zarabotka)
            cout  << " - "<< zarabotka << " denari" << endl;
        else
            cout << endl;
    }
    
    void platiCasovi(int casovi){
    	zarabotka += casovi*cenacas;
    }
    
    bool daliIstaAdresa(ParkingPlac p){
    	return (strcmp(p.adresa, adresa) == 0);
    }
    
    char *getId(){
    	return id;
    }
    
    void parkirajVozilo(Avtomobil novoVozilo){
    	Avtomobil *tmp = new Avtomobil[parkirani + 1];
        for(int i = 0; i < parkirani; i++)
            tmp[i] = niza[i];
        tmp[parkirani++] = novoVozilo;
        delete[] niza;
        niza = tmp;
    }
    
    void pecatiParkiraniVozila(){
        cout << "Vo parkingot se parkirani slednite vozila: " << endl;
		for(int i = 0; i < parkirani; i++)
            cout << i+1 << "." << niza[i].boja << " " << niza[i].brend << " " << niza[i].model << endl; 
    }
};


int main(){

	ParkingPlac p[100];
	int n,m;
	char adresa[50],id[50];
	int brojcasovi,cenacas;
	cin>>n;
	if(n > 0){


		for (int i=0;i<n;i++){
	        cin.get();
			cin.getline(adresa,50);
			cin>>id>>cenacas;
			
			ParkingPlac edna(adresa,id,cenacas);
	        
	        //povik na operatorot =
	        p[i]=edna;
		}
	    
		//plakjanje
		cin>>m;
		for (int i=0;i<m;i++){

			cin>>id>>brojcasovi;
	        
	        int findId=false;
	        for (int j=0;j<m;j++){
	            if (strcmp(p[j].getId(),id)==0){
	                p[j].platiCasovi(brojcasovi);
	                findId=true;
	            }
	        }
			if (!findId)
	        cout<<"Ne e platen parking. Greshen ID."<<endl;
		}

	    cout<<"========="<<endl;
	    ParkingPlac pCentar("Cvetan Dimov","C10",80);
		for (int i=0;i<n;i++)
	        if (p[i].daliIstaAdresa(pCentar))
	            p[i].pecati();
	} else {

		ParkingPlac najdobarPlac("Mars", "1337", 1);
	    int brVozila;
	    cin >> brVozila;
	    for(int i = 0; i < brVozila; ++i){

	    	char boja[20];
	    	char brend[20];
	    	char model[20];

	    	cin >> boja >> brend >> model;
	    	Avtomobil novAvtomobil(boja, brend, model);
	    	najdobarPlac.parkirajVozilo(novAvtomobil);
	    }
	    if(brVozila != 0)
	    najdobarPlac.pecatiParkiraniVozila();

	}



    
}

//Solution:

/*
#include <iostream>
#include <cstring>

using namespace std;

class Avtomobil{

private:
	char brand[20];
	char model[20];
	char boja[20];

public:
	//default constructor
	Avtomobil(){

		strcpy(brand, "");
		strcpy(model, "");
		strcpy(boja, "");
	}
	//argument constructor
	Avtomobil(const char* boja, const char* brand, const char* model){

		strcpy(this->brand, brand);
		strcpy(this->model, model);
		strcpy(this->boja, boja);
	}
	//assignment operator
	Avtomobil& operator=(Avtomobil& avto){

		if(this != &avto){

		strcpy(this->brand, avto.brand);
		strcpy(this->model, avto.model);
		strcpy(this->boja, avto.boja);
		}
		return *this;
	}

	void pecati(){

		cout << boja << " " << brand << " " << model << endl;
	}

};


class ParkingPlac{

private:
	char adresa[20];
	char *ID;
	int cena;
	int zarabotka;
	Avtomobil *parkiraniVozila;
	int brParkirani;

public:
    //default constructor
	ParkingPlac(){
		strcpy(adresa, "");
		ID = new char[0];
		cena = 0;
		zarabotka = 0;
		brParkirani = 0;
		parkiraniVozila = new Avtomobil[brParkirani];
	}
	//constructor
	ParkingPlac(const char *adresa,const char* id, int cena){

		zarabotka = 0;
		this->cena = cena;
		strcpy(this->adresa, adresa);
		ID = new char[strlen(id)+1];
		strcpy(ID, id);
		

		brParkirani = 0;
		parkiraniVozila = new Avtomobil[brParkirani];

	}
	//destructor
	~ParkingPlac(){
		delete [] ID;
		delete [] parkiraniVozila;
	}
	//copy constructor
	ParkingPlac(const ParkingPlac &a){

		ID = new char[strlen(a.ID)+1];
		strcpy(ID, a.ID);
		strcpy(adresa, a.adresa);
		cena = a.cena;
		zarabotka = a.zarabotka;
		//
		brParkirani = a.brParkirani;
		parkiraniVozila = new Avtomobil[a.brParkirani];
		for(int i = 0; i < brParkirani; ++i){

			(this->parkiraniVozila)[i] = a.parkiraniVozila[i];
		}

	}

	//assignment operator
	ParkingPlac& operator=(ParkingPlac &a){

		if (this != &a){

			delete [] ID;
			ID = new char[strlen(a.ID)+1];
			strcpy(ID, a.ID);
			cena = a.cena;
			zarabotka = a.zarabotka;
			strcpy(adresa, a.adresa);
			//
			delete [] parkiraniVozila;
			brParkirani = a.brParkirani;
			parkiraniVozila = new Avtomobil[a.brParkirani];
			for(int i = 0; i < brParkirani; ++i){

				(this->parkiraniVozila)[i] = a.parkiraniVozila[i];
			}	
		}
		return *this;
	}

	const char* getId(){

		return ID;
	}

	void pecati(){
		//ova e bolje
		// cout << ID << " " << adresa << " - " << zarabotka << " denari" << endl;

		cout << ID << " " << adresa;
		if (zarabotka > 0){
			cout << " - " << zarabotka << " denari";
		} 
		cout << endl;
	}

	void platiCasovi(int casovi){

		zarabotka += casovi*cena;
	}

	bool daliIstaAdresa(ParkingPlac p){

		if (strcmp(p.adresa, adresa) == 0) return true;
		return false;
	}


	void parkirajVozilo(Avtomobil novoVozilo){

		Avtomobil* novaLista = new Avtomobil[brParkirani+1];
		for(int i = 0; i < brParkirani; ++i){

			novaLista[i] = parkiraniVozila[i];
		}
		delete [] parkiraniVozila;
		parkiraniVozila = novaLista;
		parkiraniVozila[brParkirani++] = novoVozilo;
	}

	void pecatiParkiraniVozila(){

		cout << "Vo parkingot se parkirani slednite vozila: " << endl;

		for(int i = 0; i < brParkirani; ++i){

			cout << i+1 << ".";
			parkiraniVozila[i].pecati();
		}
	}
};


int main(){

	ParkingPlac p[100];
	int n,m;
	char adresa[50],id[50];
	int brojcasovi,cenacas;
	cin>>n;
	if(n > 0){


		for (int i=0;i<n;i++){
	        cin.get();
			cin.getline(adresa,50);
			cin>>id>>cenacas;
			
			ParkingPlac edna(adresa,id,cenacas);
	        
	        //povik na operatorot =
	        p[i]=edna;
		}
	    
		//plakjanje
		cin>>m;
		for (int i=0;i<m;i++){

			cin>>id>>brojcasovi;
	        
	        int findId=false;
	        for (int j=0;j<m;j++){
	            if (strcmp(p[j].getId(),id)==0){
	                p[j].platiCasovi(brojcasovi);
	                findId=true;
	            }
	        }
			if (!findId)
	        cout<<"Ne e platen parking. Greshen ID."<<endl;
		}

	    cout<<"========="<<endl;
	    ParkingPlac pCentar("Cvetan Dimov","C10",80);
		for (int i=0;i<n;i++)
	        if (p[i].daliIstaAdresa(pCentar))
	            p[i].pecati();
	} else {

		ParkingPlac najdobarPlac("Mars", "1337", 1);
	    int brVozila;
	    cin >> brVozila;
	    for(int i = 0; i < brVozila; ++i){

	    	char boja[20];
	    	char brend[20];
	    	char model[20];

	    	cin >> boja >> brend >> model;
	    	Avtomobil novAvtomobil(boja, brend, model);
	    	najdobarPlac.parkirajVozilo(novAvtomobil);
	    }
	    if(brVozila != 0)
	    najdobarPlac.pecatiParkiraniVozila();
	}    
}

*/
